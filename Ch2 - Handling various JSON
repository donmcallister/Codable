import Foundation

//Plane Model, from chapter 1
struct Plane: Codable {
    var manufacturer: String
    var model: String
    var seats: Int
    
    private enum CodingKeys: String, CodingKey {
        case manufacturer
        case model
        case seats
    }
    
}

struct Aircraft: Decodable {
    var identification: String
    var color: String
}


struct FlightPlan: Decodable {
    var aircraft: Aircraft
    
    var route: [String]
    
    var flightRules: FlightRules
    
    private var departureDates: [String: Date]
    
    var proposedDepartureDate: Date? {
        return departureDates["proposed"]
    }
    
    var actualDepartureDate: Date? {
        return departureDates["actual"]
    }
    
    var remarks: String?
}

extension FlightPlan {
    //explicit mapping any cases that have a name mismatch
    private enum CodingKeys: String, CodingKey {
        case aircraft
        case flightRules = "flight_rules"
        case route
        case departureDates = "departure_time"
        case remarks
    }
}


let json = """
{
    "aircraft": {
        "identification": "NA12345",
        "color": "Blue/White"
    },
    "route": ["KTTD", "KHIO"],
    "departure_time": {
        "proposed": "2018-04-20T15:07:24-07:00",
        "actual": "2018-04-20T15:07:24-07:00"
    },
    "flight_rules": "IFR",
    "remarks": null
}
""".data(using: .utf8)!

var decoder = JSONDecoder()
decoder.dateDecodingStrategy = .iso8601

let plan = try! decoder.decode(FlightPlan.self, from: json)
print(plan.aircraft.identification)
print(plan.actualDepartureDate!)
